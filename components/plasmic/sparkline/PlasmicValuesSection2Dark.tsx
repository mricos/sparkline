// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sa9cdtG5u1tnrsRL4NJAW9
// Component: OliTbamJX4w1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: ubZ4DzFcB6XW/component
import ListItem from "../../ListItem"; // plasmic-import: Y6I84hNxrS72/component

import { useScreenVariants as useScreenVariantshYdh4LpA7GZz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hYdh4LpA7GZz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sparkline.module.css"; // plasmic-import: sa9cdtG5u1tnrsRL4NJAW9/projectcss
import sty from "./PlasmicValuesSection2Dark.module.css"; // plasmic-import: OliTbamJX4w1/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: R_QItIJ5-MOY/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: KhDwTzDoj2bY/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: P2flqDX6hHZv/icon

export type PlasmicValuesSection2Dark__VariantMembers = {};

export type PlasmicValuesSection2Dark__VariantsArgs = {};
type VariantPropType = keyof PlasmicValuesSection2Dark__VariantsArgs;
export const PlasmicValuesSection2Dark__VariantProps =
  new Array<VariantPropType>();

export type PlasmicValuesSection2Dark__ArgsType = {
  foreground?: React.ReactNode;
};

type ArgPropType = keyof PlasmicValuesSection2Dark__ArgsType;
export const PlasmicValuesSection2Dark__ArgProps = new Array<ArgPropType>(
  "foreground"
);

export type PlasmicValuesSection2Dark__OverridesType = {
  root?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
};

export interface DefaultValuesSection2DarkProps {
  foreground?: React.ReactNode;
  className?: string;
}

function PlasmicValuesSection2Dark__RenderFunc(props: {
  variants: PlasmicValuesSection2Dark__VariantsArgs;
  args: PlasmicValuesSection2Dark__ArgsType;
  overrides: PlasmicValuesSection2Dark__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshYdh4LpA7GZz()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(projectcss.all, sty.foreground)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wcRie)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rfZ5S
                  )}
                >
                  {"Freedoms"}
                </div>

                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__yytZe
                  )}
                >
                  {"Open by design"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__voja2
                  )}
                >
                  {
                    "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                  }
                </div>

                <Button
                  children2={
                    <Icon17Icon
                      className={classNames(projectcss.all, sty.svg___8Aiv)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__rYufm)}
                  endIcon={true}
                  flat={true}
                  linkLabel={true}
                  noGap={true}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___77N93
                      )}
                    >
                      {"Learn more"}
                    </div>
                  }
                />
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__mKlM)}>
                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__tVzEc)}
                  slot={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__doItX)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3N5B
                    )}
                  >
                    {"Built on capability"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__tj27)}
                  slot={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__x60FJ)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__snsge
                    )}
                  >
                    {"Highly energetic"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__engM2)}
                  slot={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg___0KuJr)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uJfjg
                    )}
                  >
                    {"100% transparency and accountability"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__pehhs)}
                  slot={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__cvoq4)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__par6M
                    )}
                  >
                    {"Refreshing clarity"}
                  </div>
                </ListItem>

                <ListItem
                  className={classNames("__wab_instance", sty.listItem__qtc3L)}
                  slot={
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg___500A)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ypbWe
                    )}
                  >
                    {"Modern results"}
                  </div>
                </ListItem>
              </div>
            </React.Fragment>
          ),
          value: args.foreground
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "foreground"],
  foreground: ["foreground"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  foreground: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValuesSection2Dark__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValuesSection2Dark__VariantsArgs;
    args?: PlasmicValuesSection2Dark__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValuesSection2Dark__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValuesSection2Dark__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValuesSection2Dark__ArgProps,
          internalVariantPropNames: PlasmicValuesSection2Dark__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicValuesSection2Dark__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuesSection2Dark";
  } else {
    func.displayName = `PlasmicValuesSection2Dark.${nodeName}`;
  }
  return func;
}

export const PlasmicValuesSection2Dark = Object.assign(
  // Top-level PlasmicValuesSection2Dark renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),

    // Metadata about props expected for PlasmicValuesSection2Dark
    internalVariantProps: PlasmicValuesSection2Dark__VariantProps,
    internalArgProps: PlasmicValuesSection2Dark__ArgProps
  }
);

export default PlasmicValuesSection2Dark;
/* prettier-ignore-end */
