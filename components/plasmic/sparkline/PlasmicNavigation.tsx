// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sa9cdtG5u1tnrsRL4NJAW9
// Component: nO22joOvq4dJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: B5s9WNiR2fr6/component
import Button from "../../Button"; // plasmic-import: ubZ4DzFcB6XW/component

import { useScreenVariants as useScreenVariantshYdh4LpA7GZz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hYdh4LpA7GZz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sparkline.module.css"; // plasmic-import: sa9cdtG5u1tnrsRL4NJAW9/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: nO22joOvq4dJ/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: R_QItIJ5-MOY/icon

export type PlasmicNavigation__VariantMembers = {
  dark: "dark";
  centered: "centered";
  hideCta: "hideCta";
  lightBg: "lightBg";
};

export type PlasmicNavigation__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  centered?: SingleBooleanChoiceArg<"centered">;
  hideCta?: SingleBooleanChoiceArg<"hideCta">;
  lightBg?: SingleBooleanChoiceArg<"lightBg">;
};

type VariantPropType = keyof PlasmicNavigation__VariantsArgs;
export const PlasmicNavigation__VariantProps = new Array<VariantPropType>(
  "dark",
  "centered",
  "hideCta",
  "lightBg"
);

export type PlasmicNavigation__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavigation__ArgsType;
export const PlasmicNavigation__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicNavigation__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultNavigationProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  dark?: SingleBooleanChoiceArg<"dark">;
  centered?: SingleBooleanChoiceArg<"centered">;
  hideCta?: SingleBooleanChoiceArg<"hideCta">;
  lightBg?: SingleBooleanChoiceArg<"lightBg">;
  className?: string;
}

function PlasmicNavigation__RenderFunc(props: {
  variants: PlasmicNavigation__VariantsArgs;
  args: PlasmicNavigation__ArgsType;
  overrides: PlasmicNavigation__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshYdh4LpA7GZz()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcentered]: hasVariant(variants, "centered", "centered"),
          [sty.rootdark]: hasVariant(variants, "dark", "dark"),
          [sty.roothideCta]: hasVariant(variants, "hideCta", "hideCta"),
          [sty.rootlightBg]: hasVariant(variants, "lightBg", "lightBg")
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yrpY5, {
          [sty.freeBoxcentered__yrpY5ShnAa]: hasVariant(
            variants,
            "centered",
            "centered"
          ),
          [sty.freeBoxdark__yrpY5W2Ohw]: hasVariant(variants, "dark", "dark")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Logo className={classNames("__wab_instance", sty.logo__lmYWb)} />
          ),

          value: args.children
        })}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zz5Hb, {
            [sty.freeBoxcentered__zz5HbShnAa]: hasVariant(
              variants,
              "centered",
              "centered"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__miVvK)}
                  navLink={true}
                  slot={"Services"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__m4K)}
                  navLink={true}
                  slot={"Features"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button___3ANii)}
                  navLink={true}
                  slot={"Company"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__eB45R)}
                  navLink={true}
                  slot={"Contact"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button___0EZX)}
                  navLink={true}
                  slot={"Log in"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__eJxOo)}
                  darkGray={true}
                  slot={"Sign up"}
                />
              </React.Fragment>
            ),
            value: args.slot
          })}
        </p.Stack>

        {(hasVariant(variants, "centered", "centered") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__yh7Hs, {
              [sty.freeBoxcentered__yh7HsShnAa]: hasVariant(
                variants,
                "centered",
                "centered"
              )
            })}
          >
            {(hasVariant(variants, "centered", "centered") ? false : true) ? (
              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button__xPiDg,
                  {
                    [sty.buttoncentered__xPiDgShnAa]: hasVariant(
                      variants,
                      "centered",
                      "centered"
                    ),
                    [sty.buttondark__xPiDgw2Ohw]: hasVariant(
                      variants,
                      "dark",
                      "dark"
                    )
                  }
                )}
              >
                {"Sign up"}
              </button>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button___6UoFj, {
                [sty.buttondark___6UoFjw2Ohw]: hasVariant(
                  variants,
                  "dark",
                  "dark"
                )
              })}
              dark={hasVariant(variants, "dark", "dark") ? true : undefined}
              navLink={true}
              slot={"Log in"}
            />
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigation__VariantsArgs;
    args?: PlasmicNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavigation__ArgProps,
          internalVariantPropNames: PlasmicNavigation__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
